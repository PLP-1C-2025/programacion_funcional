Dejamos definido nuestro codigo:

foldDoc :: b -> (String -> b -> b) -> (Int -> b -> b) -> Doc -> b
{F0} foldDoc casoVacio casoTexto casoLinea doc = case doc of 
    Vacio -> casoVacio 
    Texto texto documentoRestante -> casoTexto texto (rec documentoRestante)
    Linea cantEspacios documentoRestante -> casoLinea cantEspacios (rec documentoRestante)
  where rec = foldDoc casoVacio casoTexto casoLinea

indentar :: Int -> Doc -> Doc
{I0} indentar i = foldDoc Vacio (\texto rec -> Texto texto rec) (\espacios rec -> Linea (espacios + i) rec)

Definimos nuestro predicado P(x): "Para todo n,m :: Int. indentar n (indentar m x) = indentar (n+m) x". 
Lo demostraremos por inducción.

CASO BASE
Veamos que se cumpla en nuestro caso base. Esto ocurre cuando tenemos el constructor base Vacio :: Doc.

Pasamos a demostrar que vale P(Vacio) teniendo en cuenta los lemas que serán demostrados al final de este documento.

  Definimos los lemas dados, tal que:
  { L1 } indentar k Vacio = Vacio, para todo k :: int
  { L2 } indentar k (Texto s d ) = Texto s (indentar k d), para todo k :: int, para todo s:: String, para todo d :: Doc
  { L3 } indentar m (Linea k d) = Linea (m+k) (indentar m d), para todo m, k :: Int y d :: Doc 

P(Vacio): indentar n (indentar m Vacio) = indentar (n+m) Vacio

Basta ver que se reduce a

indentar n Vacio = Vacio { L1 por izquierda y por derecha }

Nuevamente, podemos simplificar la expresión con { L1 } por izquierda.

Vacio = Vacio { L1 } ☑

Luego, esto es trivial y podemos afirmar que P(Vacio) es verdadero.

PASO INDUCTIVO
Qvq para todo d :: Doc, s :: String, k :: Int: 
  1. (HI) P(d) => P(Texto s d)
  2. (HI) P(d) => P(Linea k d)

Pasamos a probar nuestro inciso 1.

Qpq P(d) => P(Texto s d).

(HI) P(d): indentar n (indentar m d) = indentar (n+m) d

Queremos ver que se cumple P(Texto s d): indentar n (indentar m (Texto s d)) = indentar (n+m) (Texto s d).
Aplicando el lema 2 a ambos lados de la igualdad:

indentar n Texto s (indentar m d) = Texto s (indentar (n+m) d) { L2 por izquierda y por derecha }

Luego, aplicamos el lema 2 nuevamente a nuestro lado izquierdo.

Texto s (indentar n (indentar m d)) = Texto s (indentar (n+m) d) { L2 }

Aparece nuestra HI ( indentar n (indentar m d) ). Reemplazando:

Texto s (indentar (n+m) d) = Texto s (indentar (n+m) d) {H.I} ☑

Pasamos a demostrar que vale el inciso 2.
Qpq P(d) => P(Linea k d).

(HI) P(d): indentar m (indentar m Linea k d) = indentar (n+m) Linea k d

Queremos ver que P(Linea k d) es verdadero.

P(Linea k d): indentar n (indentar m (Linea k d)) = indentar (n+m) (Linea k d).

Aplicando el lema 3 por ambos lados:

indentar n linea (k+m) (indentar m d) = Linea (k+n+m) (indentar (n+m) d) { L3 por izquierda y por derecha }

Nuevamente aplicamos el lema 3.

linea (k+m+n) (indentar n (indentar m d)) = Linea (k+n+m) (indentar (n+m) d) { L3 }

Luego, por HI:

Linea (k+n+m) (indentar (n+m) d) = Linea (k+n+m) (indentar (n+m) d) { HI } ☑
 
Si logramos demostrar L1, L2, L3, entonces nuestro P(x) es válido para todo x :: Doc, y queda demostrado P(d) => P(Linea k d) ^ P(Texto s d).

Pasamos a demostrar los Lemas:

X BORRAR Aclaración para los Lemas L2 y L3: rec = foldDoc Vacio (\texto rec' -> Texto texto rec') (\espacios rec' -> Linea (espacios + i) rec') { Por def de foldDoc }.

L1: indentar k Vacio = Vacio

Usando la definición de indentar (y utilizando principio de extensionalidad):

indentar k Vacio = foldDoc Vacio (\texto rec -> Texto texto rec) (\espacios rec -> Linea (espacios + k) rec) Vacio { I0 }

Luego,

foldDoc Vacio (\texto rec -> Texto texto rec) (\espacios rec -> Linea (espacios + k) rec) Vacio
= case Vacio of 
  Vacio -> Vacio
  ... { F0 } (Entra en el caso Vacio)
= Vacio { DEF CASE }

Luego,

Vacio = Vacio ☑ 

L2: indentar k (Texto s d) = Texto s (indentar k d)

Aplicando la definición de indentar:

indentar k (Texto s d) 
= foldDoc Vacio (\texto rec -> Texto texto rec) (\espacios rec -> Linea (espacios + k) rec) (Texto s d) { I0 } 
= case (Texto s d) of 
    Texto texto documentoRestante ->  (\texto rec -> Texto texto rec) texto (rec documentoRestante)
    ... 
    where rec = foldDoc Vacio (\texto rec -> Texto texto rec) (\espacios rec -> Linea (espacios + k) rec) { F0 } (Entra en el caso texto)
= (\texto' recTexto -> Texto texto' recTexto) s (rec d) { DEF CASE }
= (\rec' -> Texto s recTexto) (rec d) { BETA }
= Texto s (rec d) { BETA }
= Texto s (foldDoc Vacio (\texto recTexto -> Texto texto recTexto) (\espacios recEspacios -> Linea (espacios + k) recEspacios) d) { DEF DE REC EN EL FOLD }
= Texto s (indentar k d) { I0 }

--foldDoc Vacio (\texto rec -> Texto texto rec) (\espacios rec -> Linea (espacios + k) rec) Texto s d = Texto s (indentar k d) {Def indentar, Principio de extensionalidad}

--Usando que en el case of entra en el caso texto:

--(\texto rec -> Texto texto rec) s (rec d) = Texto s (indentar k d) { Por caso de Texto }

--Luego, rec d = foldDoc Vacio (\texto rec' -> Texto texto rec') (\espacios rec' -> Linea (espacios + k) rec') d

--Por tanto, podemos reemplazar el lado izquierdo por la definición de indentar.

--(\texto rec -> Texto texto rec) s (indentar k d) = Texto s (indentar k d) { Def indentar }

--Texto s (indentar k d) = Texto s (indentar k d) ☑ { por Eta η dos veces }


indentar :: Int -> Doc -> Doc
{I0} indentar i = foldDoc Vacio (\texto rec -> Texto texto rec) (\espacios rec -> Linea (espacios + i) rec)

L3: indentar m (Linea k d) = Linea (m+k) (indentar m d)

Usando la definición de indentar:

indentar m (Linea k d) 
= foldDoc Vacio (\texto recTexto -> Texto texto recTexto) (\espacios recEspacios -> Linea (espacios + m) recEspacios) () { I0 } 
= case (Linea k d) of 
    Linea k d -> (\espacios recEspacios -> Linea (espacios + m) recEspacios) k (rec d)
    ... 
    where rec = foldDoc Vacio (\texto recTexto -> Texto texto recTexto) (\espacios recEspacios -> Linea (espacios + m) recEspacios) { F0 } (Entra en el caso linea)
= (\espacios recEspacios -> Linea (espacios + m) recEspacios) k (rec d) { DEF CASE }
= (\recEspacios -> Linea (k + m) recEspacios) (rec d) { BETA }
= Linea (k + m) (rec d) { BETA }

Por la definición de indentar, reemplazando el rec:

Linea (k + m) (rec d) = Linea (k + m) (foldDoc Vacio (\texto recTexto -> Texto texto recTexto) (\espacios recEspacios -> Linea (espacios + m) recEspacios) d) { DEF DE REC en el WHERE }

Luego por def de Indentar:

Linea (k + m) (foldDoc Vacio (\texto recTexto -> Texto texto recTexto) (\espacios recEspacios -> Linea (espacios + m) recEspacios) d) = Linea (k + m) (indentar m d)

Y como la suma es conmutativa:

Linea (k + m) (indentar m d) = Linea (m + k) (indentar m d)

Luego

Linea (m + k) (indentar m d) = Linea (m + k) (indentar m d) ☑ { Por álgebra de la suma }

De esta forma quedan comprobados los Lemas, y por ende, P(d) => P(Linea k d) ^ P(Texto s d) ☑